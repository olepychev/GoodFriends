import {
  REACTIVE_CONVEYER
} from "./chunk-CEBLIRFZ.js";
import {
  adaptReactive,
  camelize
} from "./chunk-5XSFEMF4.js";
import {
  writable
} from "./chunk-VVCV66KE.js";
import {
  onDestroy,
  onMount
} from "./chunk-D4R63FQ5.js";
import "./chunk-JC4IRQUL.js";

// node_modules/@egjs/svelte-conveyer/dist/conveyer.esm.js
var __assign = function() {
  __assign = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign.apply(this, arguments);
};
var __assign$1 = function() {
  __assign$1 = Object.assign || function __assign2(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];
      for (var p in s)
        if (Object.prototype.hasOwnProperty.call(s, p))
          t[p] = s[p];
    }
    return t;
  };
  return __assign$1.apply(this, arguments);
};
function useRef(defaultValue) {
  var refFunction = function(value) {
    refFunction.current = value;
    return {
      destroy: function() {
        return;
      }
    };
  };
  refFunction.current = defaultValue;
  return refFunction;
}
function useReactive(reactiveProps) {
  var adaptResult = adaptReactive(reactiveProps);
  var reactiveState = adaptResult.state();
  var writables = {};
  var names = Object.keys(reactiveState);
  var methods = adaptResult.methods();
  for (var name in reactiveState) {
    writables[name] = writable(reactiveState[name]);
  }
  onMount(function() {
    adaptResult.mounted();
    var inst = adaptResult.instance();
    names.forEach(function(name2) {
      inst.subscribe(name2, function(value) {
        writables[name2].set(value);
      });
    });
    adaptResult.init();
  });
  onDestroy(function() {
    adaptResult.destroy();
  });
  var reactiveEvents = reactiveProps.events || [];
  var events = reactiveEvents.reduce(function(result, name2) {
    result[camelize("on ".concat(name2))] = function(callback) {
      onMount(function() {
        adaptResult.on(name2, callback);
      });
      onDestroy(function() {
        adaptResult.off(name2, callback);
      });
    };
    return result;
  }, {});
  return __assign$1(__assign$1(__assign$1({}, writables), methods), events);
}
function useConveyer(props) {
  if (props === void 0) {
    props = {};
  }
  var elementRef = useRef();
  var result = useReactive(__assign({
    data: function() {
      return {
        container: elementRef,
        props
      };
    }
  }, REACTIVE_CONVEYER));
  return Object.assign(elementRef, result, {
    ref: elementRef
  });
}
function useInlineConveyer(props) {
  if (props === void 0) {
    props = {};
  }
  var elementRef = useRef();
  useReactive(__assign({
    data: function() {
      return {
        container: elementRef,
        props
      };
    }
  }, REACTIVE_CONVEYER));
  return elementRef;
}
export {
  useInlineConveyer as conveyer,
  useConveyer
};
//# sourceMappingURL=@egjs_svelte-conveyer.js.map
