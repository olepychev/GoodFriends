import "./chunk-JC4IRQUL.js";

// node_modules/svelte-toast/dist/svelte-toast.mjs
function noop() {
}
function run(fn) {
  return fn();
}
function blank_object() {
  return /* @__PURE__ */ Object.create(null);
}
function run_all(fns) {
  fns.forEach(run);
}
function is_function(thing) {
  return typeof thing === "function";
}
function safe_not_equal(a, b) {
  return a != a ? b == b : a !== b || (a && typeof a === "object" || typeof a === "function");
}
function append(target, node) {
  target.appendChild(node);
}
function insert(target, node, anchor) {
  target.insertBefore(node, anchor || null);
}
function detach(node) {
  node.parentNode.removeChild(node);
}
function element(name) {
  return document.createElement(name);
}
function text(data) {
  return document.createTextNode(data);
}
function attr(node, attribute, value) {
  if (value == null)
    node.removeAttribute(attribute);
  else if (node.getAttribute(attribute) !== value)
    node.setAttribute(attribute, value);
}
function children(element2) {
  return Array.from(element2.childNodes);
}
function set_data(text2, data) {
  data = "" + data;
  if (text2.data !== data)
    text2.data = data;
}
var current_component;
function set_current_component(component) {
  current_component = component;
}
var dirty_components = [];
var binding_callbacks = [];
var render_callbacks = [];
var flush_callbacks = [];
var resolved_promise = Promise.resolve();
var update_scheduled = false;
function schedule_update() {
  if (!update_scheduled) {
    update_scheduled = true;
    resolved_promise.then(flush);
  }
}
function add_render_callback(fn) {
  render_callbacks.push(fn);
}
var flushing = false;
var seen_callbacks = /* @__PURE__ */ new Set();
function flush() {
  if (flushing)
    return;
  flushing = true;
  do {
    for (let i = 0; i < dirty_components.length; i += 1) {
      const component = dirty_components[i];
      set_current_component(component);
      update(component.$$);
    }
    dirty_components.length = 0;
    while (binding_callbacks.length)
      binding_callbacks.pop()();
    for (let i = 0; i < render_callbacks.length; i += 1) {
      const callback = render_callbacks[i];
      if (!seen_callbacks.has(callback)) {
        seen_callbacks.add(callback);
        callback();
      }
    }
    render_callbacks.length = 0;
  } while (dirty_components.length);
  while (flush_callbacks.length) {
    flush_callbacks.pop()();
  }
  update_scheduled = false;
  flushing = false;
  seen_callbacks.clear();
}
function update($$) {
  if ($$.fragment !== null) {
    $$.update();
    run_all($$.before_update);
    const dirty = $$.dirty;
    $$.dirty = [-1];
    $$.fragment && $$.fragment.p($$.ctx, dirty);
    $$.after_update.forEach(add_render_callback);
  }
}
var outroing = /* @__PURE__ */ new Set();
function transition_in(block, local) {
  if (block && block.i) {
    outroing.delete(block);
    block.i(local);
  }
}
function mount_component(component, target, anchor) {
  const { fragment, on_mount, on_destroy, after_update } = component.$$;
  fragment && fragment.m(target, anchor);
  add_render_callback(() => {
    const new_on_destroy = on_mount.map(run).filter(is_function);
    if (on_destroy) {
      on_destroy.push(...new_on_destroy);
    } else {
      run_all(new_on_destroy);
    }
    component.$$.on_mount = [];
  });
  after_update.forEach(add_render_callback);
}
function destroy_component(component, detaching) {
  const $$ = component.$$;
  if ($$.fragment !== null) {
    run_all($$.on_destroy);
    $$.fragment && $$.fragment.d(detaching);
    $$.on_destroy = $$.fragment = null;
    $$.ctx = [];
  }
}
function make_dirty(component, i) {
  if (component.$$.dirty[0] === -1) {
    dirty_components.push(component);
    schedule_update();
    component.$$.dirty.fill(0);
  }
  component.$$.dirty[i / 31 | 0] |= 1 << i % 31;
}
function init(component, options, instance2, create_fragment2, not_equal, props, dirty = [-1]) {
  const parent_component = current_component;
  set_current_component(component);
  const prop_values = options.props || {};
  const $$ = component.$$ = {
    fragment: null,
    ctx: null,
    // state
    props,
    update: noop,
    not_equal,
    bound: blank_object(),
    // lifecycle
    on_mount: [],
    on_destroy: [],
    before_update: [],
    after_update: [],
    context: new Map(parent_component ? parent_component.$$.context : []),
    // everything else
    callbacks: blank_object(),
    dirty
  };
  let ready = false;
  $$.ctx = instance2 ? instance2(component, prop_values, (i, ret, ...rest) => {
    const value = rest.length ? rest[0] : ret;
    if ($$.ctx && not_equal($$.ctx[i], $$.ctx[i] = value)) {
      if ($$.bound[i])
        $$.bound[i](value);
      if (ready)
        make_dirty(component, i);
    }
    return ret;
  }) : [];
  $$.update();
  ready = true;
  run_all($$.before_update);
  $$.fragment = create_fragment2 ? create_fragment2($$.ctx) : false;
  if (options.target) {
    if (options.hydrate) {
      const nodes = children(options.target);
      $$.fragment && $$.fragment.l(nodes);
      nodes.forEach(detach);
    } else {
      $$.fragment && $$.fragment.c();
    }
    if (options.intro)
      transition_in(component.$$.fragment);
    mount_component(component, options.target, options.anchor);
    flush();
  }
  set_current_component(parent_component);
}
var SvelteComponent = class {
  $destroy() {
    destroy_component(this, 1);
    this.$destroy = noop;
  }
  $on(type, callback) {
    const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
    callbacks.push(callback);
    return () => {
      const index = callbacks.indexOf(callback);
      if (index !== -1)
        callbacks.splice(index, 1);
    };
  }
  $set() {
  }
};
function add_css() {
  var style = element("style");
  style.id = "svelte-3qemlt-style";
  style.textContent = ".toast-container.svelte-3qemlt{position:fixed;z-index:999}.top.svelte-3qemlt{top:15px}.bottom.svelte-3qemlt{bottom:15px}.left.svelte-3qemlt{left:15px}.right.svelte-3qemlt{right:15px}.center.svelte-3qemlt{left:50%;transform:translateX(-50%);-webkit-transform:translateX(-50%)}.toast.svelte-3qemlt{height:38px;line-height:38px;padding:0 20px;box-shadow:0 1px 3px rgba(0, 0, 0, .12), 0 1px 2px rgba(0, 0, 0, .24);color:#FFF;-webkit-transition:opacity 0.2s, -webkit-transform 0.2s;transition:opacity 0.2s, transform 0.2s, -webkit-transform 0.2s;-webkit-transform:translateY(35px);transform:translateY(35px);opacity:0;max-width:200px;white-space:nowrap;overflow:hidden;text-overflow:ellipsis}.info.svelte-3qemlt{background-color:#0091EA}.success.svelte-3qemlt{background-color:#4CAF50}.error.svelte-3qemlt{background-color:#F44336}.default.svelte-3qemlt{background-color:#353535}.anim.svelte-3qemlt{opacity:1;-webkit-transform:translateY(0);transform:translateY(0)}";
  append(document.head, style);
}
function create_fragment(ctx) {
  let div1;
  let div0;
  let t;
  let div0_class_value;
  let div1_class_value;
  return {
    c() {
      div1 = element("div");
      div0 = element("div");
      t = text(
        /*msg*/
        ctx[0]
      );
      attr(div0, "class", div0_class_value = "toast " + /*type*/
      ctx[1] + " svelte-3qemlt");
      attr(div1, "class", div1_class_value = "toast-container " + /*_position*/
      ctx[2] + " svelte-3qemlt");
    },
    m(target, anchor) {
      insert(target, div1, anchor);
      append(div1, div0);
      append(div0, t);
    },
    p(ctx2, [dirty]) {
      if (dirty & /*msg*/
      1)
        set_data(
          t,
          /*msg*/
          ctx2[0]
        );
      if (dirty & /*type*/
      2 && div0_class_value !== (div0_class_value = "toast " + /*type*/
      ctx2[1] + " svelte-3qemlt")) {
        attr(div0, "class", div0_class_value);
      }
      if (dirty & /*_position*/
      4 && div1_class_value !== (div1_class_value = "toast-container " + /*_position*/
      ctx2[2] + " svelte-3qemlt")) {
        attr(div1, "class", div1_class_value);
      }
    },
    i: noop,
    o: noop,
    d(detaching) {
      if (detaching)
        detach(div1);
    }
  };
}
function instance($$self, $$props, $$invalidate) {
  let { msg = "" } = $$props;
  let { type = "" } = $$props;
  let { position = "bottom-center" } = $$props;
  $$self.$set = ($$props2) => {
    if ("msg" in $$props2)
      $$invalidate(0, msg = $$props2.msg);
    if ("type" in $$props2)
      $$invalidate(1, type = $$props2.type);
    if ("position" in $$props2)
      $$invalidate(3, position = $$props2.position);
  };
  let _position;
  $$self.$$.update = () => {
    if ($$self.$$.dirty & /*position*/
    8) {
      $$invalidate(2, _position = position.split("-").join(" "));
    }
  };
  return [msg, type, _position, position];
}
var Toast = class extends SvelteComponent {
  constructor(options) {
    super();
    if (!document.getElementById("svelte-3qemlt-style"))
      add_css();
    init(this, options, instance, create_fragment, safe_not_equal, { msg: 0, type: 1, position: 3 });
  }
};
var Toast$1 = class {
  constructor(opts) {
    this.opts = Object.assign({
      position: "bottom-center",
      duration: 2e3
    }, opts);
  }
  show(msg) {
    var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this._show(msg, opts, "default");
  }
  info(msg) {
    var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this._show(msg, opts, "info");
  }
  success(msg) {
    var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this._show(msg, opts, "success");
  }
  error(msg) {
    var opts = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {};
    this._show(msg, opts, "error");
  }
  _show(msg, opts, type) {
    var _opts = Object.assign({}, this.opts, opts);
    var t = new Toast({
      target: document.querySelector("body"),
      props: {
        msg,
        type,
        position: _opts.position
      }
    });
    setTimeout(() => {
      t.$set({
        type: type + " anim"
      });
    }, 0);
    setTimeout(() => {
      t.$destroy();
    }, _opts.duration);
  }
};
var svelte_toast_default = Toast$1;
export {
  svelte_toast_default as default
};
//# sourceMappingURL=svelte-toast.js.map
