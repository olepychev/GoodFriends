/*
Copyright (c) NAVER Corp.
name: @cfcs/svelte
license: MIT
author: NAVER Corp.
repository: https://github.com/naver/cfcs
version: 0.0.26
*/
'use strict';

var core = require('@cfcs/core');
var internal = require('svelte/internal');
var store = require('svelte/store');

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
var __assign = function () {
  __assign = Object.assign || function __assign(t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

/**
 * @description Instead of `bind:this`, you can bind this via the `use:` directive.
 * @category Common
 * @see Ref
 * @example
 * ```html
 * <script>
 * import { onMount } from "svelte";
 * import { useRef } from "@cfcs/svelte";
 *
 * const elementRef = useRef();
 *
 * onMount(() => {
 *   console.log(elementRef.current);
 * });
 * </script>
 * <div use:elementRef>Element</div>
 * ```
 */

function useRef(defaultValue) {
  var refFunction = function (value) {
    refFunction.current = value;
    return {
      destroy: function () {
        return;
      }
    };
  };

  refFunction.current = defaultValue;
  return refFunction;
}
/**
 * @description In Svelte, you can create reactive components through adapters.
 * @category Reactive
 * @example
 * ```ts
 * import { useReactive } from "@cfcs/svelte";
 *
 * export function useReactiveComponent() {
 *   return useReactive(REACTIVE_ADAPTER);
 * }
 * ```
 */

function useReactive(reactiveAdapter, props) {
  var adaptResult = core.adaptReactive(reactiveAdapter, props);
  var reactiveState = adaptResult.state();
  var writables = {};
  var names = Object.keys(reactiveState);
  var methods = adaptResult.methods();

  for (var name in reactiveState) {
    writables[name] = store.writable(reactiveState[name]);
  }

  internal.onMount(function () {
    adaptResult.mounted();
    var inst = adaptResult.instance();
    names.forEach(function (name) {
      inst.subscribe(name, function (value) {
        writables[name].set(value);
      });
    });
    adaptResult.init();
  });
  internal.onDestroy(function () {
    adaptResult.destroy();
  });
  var reactiveEvents = adaptResult.events();
  var events = reactiveEvents.reduce(function (result, name) {
    result[core.camelize("on ".concat(name))] = function (callback) {
      adaptResult.on(name, callback);
      internal.onDestroy(function () {
        adaptResult.off(name, callback);
      });
    };

    return result;
  }, {});
  return __assign(__assign(__assign({}, writables), methods), events);
}

exports.useReactive = useReactive;
exports.useRef = useRef;
//# sourceMappingURL=cfcs.cjs.js.map
