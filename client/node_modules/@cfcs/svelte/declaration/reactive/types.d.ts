import { Writable } from "svelte/store";
import { ReactiveAdapterParam, ReactiveEventParameters, ReactiveState, ReactiveSubscribe } from "@cfcs/core";
export declare type ReactiveEvents<Events extends Record<string, any>> = {
    [K in keyof Events as `on${Capitalize<string & K>}`]: (callback: ((...args: ReactiveEventParameters<Events, K & string>) => void)) => void;
};
export declare type Ref<T> = ((value: T) => {
    destroy(): void;
}) & {
    current?: T;
};
export declare type ReactiveResult<Instance extends ReactiveSubscribe<Record<string, any>>, State extends Record<string, any> = ReactiveState<Instance>, Methods extends keyof Partial<Instance> = any, Events extends Record<string, any> = {}> = {
    [key in keyof State]: Writable<State[key]>;
} & {
    [key in Methods]: Instance[key];
} & ReactiveEvents<Events>;
export declare type ReactiveAdapterResult<Adapter extends ReactiveAdapterParam<any, any, any, any, any>> = Adapter extends ReactiveAdapterParam<infer Instance, infer State, infer Methods, any, infer Events> ? SvelteReactiveResult<Instance, State, Methods, Events> : {};
export declare type SvelteReactiveEvents<Events extends Record<string, any>> = ReactiveEvents<Events>;
export declare type SvelteReactiveResult<Instance extends ReactiveSubscribe<Record<string, any>>, State extends Record<string, any> = ReactiveState<Instance>, Methods extends keyof Partial<Instance> = any, Events extends Record<string, any> = {}> = ReactiveResult<Instance, State, Methods, Events>;
export declare type SvelteReactiveAdapterResult<Adapter extends ReactiveAdapterParam<any, any, any, any, any>> = ReactiveAdapterResult<Adapter>;
